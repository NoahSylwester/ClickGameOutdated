{"version":3,"sources":["logo.svg","components/Navbar/Navbar.js","components/Image/Image.js","components/Board/Board.js","pages/Game.js","utils/API.js","components/Search/Search.js","pages/Splash.js","pages/Error.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","href","resultText","score","topScore","Image","src","onClick","click","id","Board","data","slice","map","element","largeImageURL","Game","state","dataArray","clickedElements","this","setState","arrayInput","array","i","length","j","Math","floor","random","temp","clickedElementId","includes","shuffleArray","newArray","push","style","position","width","height","handleClick","bind","React","Component","input","axios","get","replace","Search","queryString","event","preventDefault","enter","handleInputChange","target","name","value","placeholder","onChange","margin","Splash","display","flexDirection","justifyContent","alignItems","fontFamily","App","gameStart","ApiResponse","query","API","then","res","hits","resSlice","console","log","beginGame","exit","stopGame","handleSearch","search","Error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f65ac10b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport './index.css';\n\nfunction Navbar(props) {\n    return (\n        <div className=\"Navbar\">\n            <a className=\"brand\" href=\"/ImageClicker\">Image Clicker</a>\n            <span className=\"result\">{props.resultText}</span>\n            <span className=\"topScore\">Score: {props.score} &nbsp;//&nbsp; Top Score: {props.topScore}&nbsp;&nbsp;&nbsp;&nbsp;</span>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport './index.css';\n\nfunction Image(props) {\n    return (\n        <div className=\"imgWrapper\">\n            <img src={props.src} onClick={() => props.click(props.id)} id={props.id} />\n        </div>\n    )\n}\n\nexport default Image;","import React from 'react';\nimport Image from '../Image/Image';\nimport './index.css';\n\nfunction Board(props) {\n    return (\n        <div className=\"Board\">\n            <div className=\"imageRow\">{props.data.slice(0,4).map((element) => <Image src={element.largeImageURL} id={element.id} click={props.click} />)}</div>\n            <div className=\"imageRow\">{props.data.slice(4,8).map((element) => <Image src={element.largeImageURL} id={element.id} click={props.click} />)}</div>\n            <div className=\"imageRow bottom\">{props.data.slice(8,12).map((element) => <Image src={element.largeImageURL} id={element.id} click={props.click} />)}</div>\n        </div>\n    )\n}\n\nexport default Board;","import React from 'react';\nimport Navbar from '../components/Navbar/Navbar';\nimport Board from '../components/Board/Board';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataArray: [],\n            clickedElements: [],\n            score: 0,\n            topScore: 0,\n            resultText: \"Don't click the same image twice!\"\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            dataArray: this.props.data,\n        })\n    }\n\n    // shuffle function taken from the following url:\n    // https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\n    shuffleArray(arrayInput) {\n        let array = arrayInput.slice();\n        for ( let i = array.length - 1; i > 0; i-- ) {\n            const j = Math.floor(Math.random() * i)\n            const temp = array[i]\n            array[i] = array[j]\n            array[j] = temp\n          }\n        return array;\n    }\n\n    handleClick(clickedElementId) {\n        if ( !this.state.clickedElements.includes(clickedElementId) ) {\n            // correct guess increments score, updates guesses, and randomizes array\n            const newArray = this.state.clickedElements.slice();\n            newArray.push(clickedElementId);\n            this.setState({\n                score: this.state.score + 1,\n                clickedElements: newArray,\n                dataArray: this.shuffleArray(this.state.dataArray),\n                resultText: \"Correct!\",\n            })\n            if ( this.state.score + 1 > this.state.topScore ) {\n                // update highest score if applicable\n                this.setState({\n                    topScore: this.state.score + 1,\n                })\n            }\n        }\n        else {\n            // incorrect guess resets score and randomizes array\n            this.setState({\n                score: 0,\n                clickedElements: [],\n                dataArray: this.shuffleArray(this.state.dataArray),\n                resultText: \"Incorrect.\",\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div style={{ position: 'relative', width: '100%', height: '100%' }}>\n                <Navbar score={this.state.score} topScore={this.state.topScore} resultText={this.state.resultText}>NAVBAR</Navbar>\n                <Board data={this.state.dataArray} click={this.handleClick.bind(this)}>BOARD</Board>\n            </div>\n        )\n    }\n}\n\nexport default Game;","import axios from 'axios';\nimport dotenv from 'dotenv';\n\nconst API_KEY = '14410776-c69a6ea84b5c2dc56d5dda714';\n\nexport default {\n    getImages: (input) => {\n        return axios.get(`https://pixabay.com/api/?key=${API_KEY}&q=${input.replace(\" \", \"+\")}`)\n    }\n}","import React from 'react';\nimport API from '../../utils/API';\nimport './index.css'\n\nclass Search extends React.Component {\n    state = {\n        queryString: \"\",\n    };\n\n    handleClick = event => {\n        event.preventDefault();\n        this.props.enter(this.state.queryString);\n    }\n\n    handleInputChange = event => {\n        // Getting the value and name of the input which triggered the change\n        const { name, value } = event.target;\n    \n        // Updating the input's state\n        this.setState({\n          [name]: value\n        });\n      };\n    \n\n    render() {\n        return (\n            <div className=\"Search\">\n                <h1>Image Clicker</h1>\n                <input \n                    name=\"queryString\"\n                    value={this.state.queryString}\n                    placeholder=\"Search something...\"\n                    onChange={this.handleInputChange}\n                />\n                <br />\n                <button\n                    onClick={this.handleClick}\n                    style={{ margin: '20px 0 20px 0'}}\n                >\n                    Enter\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Search;","import React from 'react';\nimport Search from '../components/Search/Search';\n\nclass Splash extends React.Component {\n    constructor(props) {\n        super(props);\n        // this.state = {\n        //     array: [],\n        // }\n    }\n    render() {\n        return (\n            <div style={{\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center',\n                width: '100%',\n                height: '100%',\n                fontFamily: \"'Comfortaa', cursive\",\n            }}>\n                <Search enter={this.props.enter} />\n            </div>\n        )\n    }\n}\n\nexport default Splash;","import React from 'react';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n        }\n    }\n    render() {\n        return (\n            <div>\n                <h1>Something went wrong. ):</h1>\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './pages/Game';\nimport Splash from './pages/Splash';\nimport Error from './pages/Error';\nimport API from './utils/API';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        gameStart: false,\n        ApiResponse: \"\",\n    }\n  }\n\n  beginGame() {\n    this.setState({\n      gameStart: true,\n    })\n  }\n\n  stopGame() {\n    this.setState({\n      gameStart: false,\n    })\n  }\n\n  handleSearch(query) {\n    API.getImages(query).then((res) => {\n      if (res.data.hits.length < 16) {\n        for (let i = 0; i < 12; i++) {\n          res.data.hits.push({ largeImageURL: \"https://usatftw.files.wordpress.com/2019/02/orca.jpg?w=605&h=363&crop=1&zoom=2\" })\n        }\n      }\n      const resSlice = res.data.hits.slice(0, 12);\n      console.log(resSlice);\n      this.setState({\n        ApiResponse: resSlice,\n      })\n      this.beginGame();\n    });\n  };\n\n  render() {\n    switch (this.state.gameStart) {\n      case true:\n        return <Game exit={this.stopGame.bind(this)} data={this.state.ApiResponse} />;\n      case false:\n        return <Splash enter={this.handleSearch.bind(this)} search={this.handleSearch} />;\n      default:\n        return <Error />;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}